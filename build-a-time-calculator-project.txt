def add_time(start_time, duration, start_day=None):
    # Split the start time into components
    start_time_parts = start_time.split()
    time_part = start_time_parts[0]
    period = start_time_parts[1]

    # Split the time into hours and minutes
    hours, minutes = map(int, time_part.split(':'))
    dur_hours, dur_minutes = map(int, duration.split(':'))

    # Convert start time to 24-hour format
    if period == 'PM' and hours != 12:
        hours += 12
    elif period == 'AM' and hours == 12:
        hours = 0

    # Add duration to start time
    total_minutes = hours * 60 + minutes + dur_hours * 60 + dur_minutes

    # Calculate new time and days passed
    new_hours = (total_minutes // 60) % 24
    new_minutes = total_minutes % 60
    days_passed = total_minutes // (24 * 60)

    # Convert back to 12-hour format
    if new_hours < 12:
        new_period = 'AM'
        if new_hours == 0:
            new_hours = 12
    else:
        new_period = 'PM'
        if new_hours != 12:
            new_hours -= 12

    # Format the new time
    new_time = f"{new_hours}:{new_minutes:02d} {new_period}"

    # Handle the day of the week if provided
    if start_day:
        days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        start_day_index = days_of_week.index(start_day.lower().capitalize())
        new_day_index = (start_day_index + days_passed) % 7
        new_day = days_of_week[new_day_index]
        new_time += f", {new_day}"

    # Handle "next day" or "n days later"
    if days_passed == 1:
        new_time += " (next day)"
    elif days_passed > 1:
        new_time += f" ({days_passed} days later)"

    return new_time